---
alwaysApply: true
---

# Voc — Development Workflow

Simple workflow for implementing Voc according to `vision.md`, `@conventions.md` using `tasklist.md`.

## Workflow Rules

### 1. Work According to Plan
- Follow `tasklist.md` order strictly
- Complete tasks in sequence (1.1.1 → 1.1.2 → 1.1.3...)
- Don't skip ahead or work on multiple tasks simultaneously

### 2. Human Approval Required
- **Before coding**: Present implementation plan and acceptance criteria for approval
- **After coding**: Show code changes and verify acceptance criteria fulfillment
- **Wait for confirmation** before proceeding

### 3. Implementation Cycle
1. **Plan** → Present approach and acceptance criteria for current task
2. **Approve** → Wait for human confirmation
3. **Implement** → Write code according to plan
4. **Verify** → Check if acceptance criteria are fulfilled (tests/metrics)
5. **Review** → Show changes and verification results for human check
6. **Confirm** → Wait for approval to continue
7. **Update** → Mark task complete in `tasklist.md`
8. **Commit** → Make git commit with task ID
9. **Next** → Move to next task in sequence

### 4. Progress Tracking
- Update `tasklist.md` checkboxes: `- [x]` for completed tasks
- Add completion notes if needed
- Coordinate transition to next step

### 5. Git Commits
- Format: `feat(task-id): description`
- Example: `feat(1.1.1): create Firebase project and configure hosting`
- One commit per completed task

## Workflow Example

```
AI: "Starting task 1.1.1 - Create Firebase project and configure hosting.

Plan: Set up new Firebase project, configure hosting, add firebase.json.

Acceptance Criteria:
- firebase.json file exists with correct structure
- Firebase CLI can read and validate configuration
- Project structure matches vision.md layout
- Firebase hosting is configured and ready for deployment

Approve?"

Human: "Approved"

AI: [implements code]

AI: "Task 1.1.1 complete. Changes:
- Created firebase.json
- Configured hosting settings
- Set up project structure

Acceptance Criteria Verification:
✅ firebase.json exists and has correct structure
✅ Firebase CLI can read configuration (tested: firebase projects:list works)
✅ Project structure matches vision.md
✅ Firebase hosting configured (tested: firebase hosting:channel:list works)

Review and confirm?"

Human: "Confirmed"

AI: [updates tasklist.md, commits, moves to 1.1.2]
```

## Acceptance Criteria Guidelines

### Before Coding: Define Acceptance Criteria
- **Specific**: Clear, measurable outcomes
- **Testable**: Can be verified with tests, commands, or metrics
- **Complete**: Covers all aspects of the task
- **Realistic**: Achievable within task scope

### After Coding: Verify Acceptance Criteria
- **Prove fulfillment**: Use tests, commands, or metrics to demonstrate success
- **Show evidence**: Provide concrete proof (test results, command output, etc.)
- **Check completeness**: Ensure all criteria are met
- **Document results**: Record verification method and outcome

### Verification Methods
- **Tests**: Unit tests, integration tests, smoke tests
- **Commands**: CLI commands that validate functionality
- **Metrics**: Performance measurements, bundle sizes, etc.
- **Manual checks**: Visual inspection, user flows
- **Linting**: Code quality checks, type checking

### Examples by Task Type
- **Setup tasks**: Files exist, configs valid, tools work (CLI commands)
- **UI tasks**: Components render, interactions work, styling applied (visual tests)
- **API tasks**: Endpoints respond correctly, data flows properly (integration tests)
- **Integration tasks**: End-to-end flow works, no errors (smoke tests)

## Key Principles
- **One task at a time**
- **Human approval required**
- **Update progress immediately**
- **Commit after each task**
- **Follow the plan**

---

**Start**: Begin with task 1.1.1 from `tasklist.md`
# Voc — Development Workflow

Simple workflow for implementing Voc according to `vision.md`, `@conventions.md` using `tasklist.md`.

## Workflow Rules

### 1. Work According to Plan
- Follow `tasklist.md` order strictly
- Complete tasks in sequence (1.1.1 → 1.1.2 → 1.1.3...)
- Don't skip ahead or work on multiple tasks simultaneously

### 2. Human Approval Required
- **Before coding**: Present implementation plan and acceptance criteria for approval
- **After coding**: Show code changes and verify acceptance criteria fulfillment
- **Wait for confirmation** before proceeding

### 3. Implementation Cycle
1. **Plan** → Present approach and acceptance criteria for current task
2. **Approve** → Wait for human confirmation
3. **Implement** → Write code according to plan
4. **Verify** → Check if acceptance criteria are fulfilled (tests/metrics)
5. **Review** → Show changes and verification results for human check
6. **Confirm** → Wait for approval to continue
7. **Update** → Mark task complete in `tasklist.md`
8. **Commit** → Make git commit with task ID
9. **Next** → Move to next task in sequence

### 4. Progress Tracking
- Update `tasklist.md` checkboxes: `- [x]` for completed tasks
- Add completion notes if needed
- Coordinate transition to next step

### 5. Git Commits
- Format: `feat(task-id): description`
- Example: `feat(1.1.1): create Firebase project and configure hosting`
- One commit per completed task

## Workflow Example

```
AI: "Starting task 1.1.1 - Create Firebase project and configure hosting.

Plan: Set up new Firebase project, configure hosting, add firebase.json.

Acceptance Criteria:
- firebase.json file exists with correct structure
- Firebase CLI can read and validate configuration
- Project structure matches vision.md layout
- Firebase hosting is configured and ready for deployment

Approve?"

Human: "Approved"

AI: [implements code]

AI: "Task 1.1.1 complete. Changes:
- Created firebase.json
- Configured hosting settings
- Set up project structure

Acceptance Criteria Verification:
✅ firebase.json exists and has correct structure
✅ Firebase CLI can read configuration (tested: firebase projects:list works)
✅ Project structure matches vision.md
✅ Firebase hosting configured (tested: firebase hosting:channel:list works)

Review and confirm?"

Human: "Confirmed"

AI: [updates tasklist.md, commits, moves to 1.1.2]
```

## Acceptance Criteria Guidelines

### Before Coding: Define Acceptance Criteria
- **Specific**: Clear, measurable outcomes
- **Testable**: Can be verified with tests, commands, or metrics
- **Complete**: Covers all aspects of the task
- **Realistic**: Achievable within task scope

### After Coding: Verify Acceptance Criteria
- **Prove fulfillment**: Use tests, commands, or metrics to demonstrate success
- **Show evidence**: Provide concrete proof (test results, command output, etc.)
- **Check completeness**: Ensure all criteria are met
- **Document results**: Record verification method and outcome

### Verification Methods
- **Tests**: Unit tests, integration tests, smoke tests
- **Commands**: CLI commands that validate functionality
- **Metrics**: Performance measurements, bundle sizes, etc.
- **Manual checks**: Visual inspection, user flows
- **Linting**: Code quality checks, type checking

### Examples by Task Type
- **Setup tasks**: Files exist, configs valid, tools work (CLI commands)
- **UI tasks**: Components render, interactions work, styling applied (visual tests)
- **API tasks**: Endpoints respond correctly, data flows properly (integration tests)
- **Integration tasks**: End-to-end flow works, no errors (smoke tests)

## Key Principles
- **One task at a time**
- **Human approval required**
- **Update progress immediately**
- **Commit after each task**
- **Follow the plan**

---

**Start**: Begin with task 1.1.1 from `tasklist.md`
